:-set_prism_flag(learn_mode,both).
:-set_prism_flag(log_scale,on).

:- table values/2.
:- table length_ranges/1.

%:- table member/2.
%
%%msw(A,C) :-
%        values(A,B),
%        member(C,B).

values(begin,[n,start]).
values(trans(c),[c,stop]).
values(trans(start),[c]).
values(trans(stop),[end]).
values(trans(n),[start,n,end]).

values(emit(start),Emits) :-
        start_codons(StartCodons),
        length_ranges(LengthRanges),
        findall([C,P],
                (member(P,[[0,0,0],[1,1,1]]), 
                 member(C, StartCodons)),
                Emits).

values(emit(c),Emits) :-
        all_codons(AllCodons),
        start_codons(StartCodons),
        stop_codons(StopCodons),
        subtract(AllCodons,StopCodons,AllCoding),
        subtract(AllCoding,StartCodons,AllCodingNonStart),
        length_ranges(LengthRanges),
        findall([C,P],
                (member(P,[[0,0,0],[1,1,1]]), 
                 member(C, StartCodons)),
                EmitsStart),
        findall([C,P],
                (member(P,[[0,0,0],[1,1,1]]), 
                 member(C, AllCodingNonStart)),
                EmitsNonStart),
        append(EmitsStart,EmitsNonStart,Emits).


values(emit(n),Emits) :-
        all_codons(AllCodons),
        start_codons(StartCodons),
        subtract(AllCodons,StartCodons,AllNonStart),
        length_ranges(LengthRanges),
        findall([C,P],
                (member(P,[[0,0,0],[1,1,1]]), 
                 member(C, StartCodons)),
                EmitsStart),
        findall([C,P],
                (member(P,[[0,0,0],[1,1,1]]), 
                 member(C, AllNonStart)),
                EmitsNonStart),
        append(EmitsStart,EmitsNonStart,Emits).

values(emit(stop),Emits) :-
        stop_codons(StopCodons),
        findall([C,P],(member(P,[[0,0,0],[1,1,1]]),member(C,StopCodons)),Emits).
 
      
all_codons(L) :-
        L = [ [a,a,a],[a,a,t],[a,a,c],[a,a,g],
              [a,t,a],[a,t,t],[a,t,c],[a,t,g],
              [a,c,a],[a,c,t],[a,c,c],[a,c,g],
              [a,g,a],[a,g,t],[a,g,c],[a,g,g],
              [t,a,a],[t,a,t],[t,a,c],[t,a,g],
              [t,t,a],[t,t,t],[t,t,c],[t,t,g],
              [t,c,a],[t,c,t],[t,c,c],[t,c,g],
              [t,g,a],[t,g,t],[t,g,c],[t,g,g],
              [c,a,a],[c,a,t],[c,a,c],[c,a,g],
              [c,t,a],[c,t,t],[c,t,c],[c,t,g],
              [c,c,a],[c,c,t],[c,c,c],[c,c,g],
              [c,g,a],[c,g,t],[c,g,c],[c,g,g],
              [g,a,a],[g,a,t],[g,a,c],[g,a,g],
              [g,t,a],[g,t,t],[g,t,c],[g,t,g],
              [g,c,a],[g,c,t],[g,c,c],[g,c,g],
              [g,g,a],[g,g,t],[g,g,c],[g,g,g]].


start_codons(L) :-
        L = [[t,t,g],[c,t,g],[a,t,t],[a,t,c],[a,t,a],[a,t,g],[g,t,g]].

stop_codons(L) :-
        L = [[t,a,a],[t,g,a],[t,a,g]].


min_orf_length(5).
max_orf_length(1500).

score_categories(50).

orf_lengths(Lengths) :-
	min_orf_length(Min),
	max_orf_length(Max),
	upto(Min,Max,Lengths).

upto(StartEnd,StartEnd,[StartEnd]).
upto(Start,End,[Start|Rest]) :-
	NewStart is Start + 1,
	upto(NewStart,End,Rest).

first_n(_,[],[]).
first_n(0,_,[]).
first_n(N,[E|R1],[E|R2]) :-
	N1 is N - 1,
	first_n(N1,R1,R2).

sequence_range(Seq,[First,Last]) :-
        reverse(Seq,RevSeq),
        Seq = [First|_],
        RevSeq = [Last|_].


divide_list(L,NumChunks,Chunks) :-
        length(L,ListLen),
	ChunkSize is ListLen // NumChunks,
        divide_list_rec(L,ChunkSize,Chunks),
        !.
        
divide_list_rec([],_,[]) :- !.

divide_list_rec(List,ChunkSize,[Chunk]) :-
	first_n(ChunkSize,List,Chunk),
        length(Chunk,ChunkSizeReal),
        ChunkSizeReal < ChunkSize,
        !.

divide_list_rec(List,ChunkSize,[Chunk|ChunksRest]) :-
	first_n(ChunkSize,List,Chunk),
        length(Chunk,ChunkSizeReal),
        ChunkSizeReal >= ChunkSize,
       	append(Chunk,RestList,List),
        !,
        divide_list_rec(RestList,ChunkSize,ChunksRest).


	
length_ranges([out_of_range(too_short)|RangesWithOverflow]) :-
	score_categories(NumCategories),
	orf_lengths(GeneLengths),
	divide_list(GeneLengths,NumCategories,SubSequences),!,
	findall(R,(member(Seq,SubSequences),sequence_range(Seq,R)),Ranges),
	reverse(Ranges,RangesRev),
	reverse([out_of_range(too_long)|RangesRev],RangesWithOverflow).




%%%
% Model specification:


combiner(Seq,Annotation) :-
        msw(begin,State),
        combiner_rec(State,Seq,Annotation).

% End State
combiner_rec(end,[],[]).

combiner_rec(start,[I|Is],[1,1,1|As]) :-
        msw(emit(start),I),
        msw(trans(start),NextState),
        combiner_rec(NextState,Is,As).

combiner_rec(stop,[I|Is],[1,1,1|As]) :-
        msw(emit(stop),I),
        msw(trans(stop),NextState),
        combiner_rec(NextState,Is,As).

combiner_rec(c,[I|Is],[1,1,1|As]) :-
        msw(emit(c),I),
        msw(trans(c),NextState),
        combiner_rec(NextState,Is,As).

combiner_rec(n,[I|Is],[0,0,0|As]) :-
        msw(emit(n),I),
        msw(trans(n),NextState),
        combiner_rec(NextState,Is,As).





combiner_noannot(Seq) :-
        msw(begin,State),
        combiner_noannot_rec(State,Seq).

% End State
combiner_noannot_rec(end,[]).

combiner_noannot_rec(State,[I|Is]) :-
        State \= end,
        msw(emit(State),I),
        msw(trans(State),NextState),
        combiner_noannot_rec(NextState,Is).

/*
combiner_noannot_rec(stop,[I|Is]) :-
        msw(emit(stop),I),
        msw(trans(stop),NextState),
        combiner_noannot_rec(NextState,Is).

combiner_noannot_rec(c,[I|Is]) :-
        msw(emit(c),I),
        msw(trans(c),NextState),
        combiner_noannot_rec(NextState,Is).

combiner_noannot_rec(n,[I|Is]) :-
        msw(emit(n),I),
        msw(trans(n),NextState),
        combiner_noannot_rec(NextState,Is).
*/
