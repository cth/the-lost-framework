:-set_prism_flag(learn_mode,both).
:-set_prism_flag(log_scale,on).

values(begin,[n,start]).
values(trans(c),[c,stop]).
values(trans(start),[c]).
values(trans(stop),[end]).
values(trans(n),[start,n,end]).

values(emit(start,_codon),Emits) :-
        start_codons(StartCodons),
        length_ranges(LengthRanges),
        findall([C], member(C, StartCodons), Emits).

values(emit(c,_codon),Emits) :-
        all_codons(AllCodons),
        start_codons(StartCodons),
        stop_codons(StopCodons),
        subtract(AllCodons,StopCodons,AllCoding),
        subtract(AllCoding,StartCodons,AllCodingNonStart),
        length_ranges(LengthRanges),
        findall([C], member(C, StartCodons), EmitsStart),
        findall([C], member(C, AllCodingNonStart), EmitsNonStart),
        append(EmitsStart,EmitsNonStart,Emits).

values(emit(n,_codon),Emits) :-
        all_codons(AllCodons),
        start_codons(StartCodons),
        subtract(AllCodons,StartCodons,AllNonStart),
        length_ranges(LengthRanges),
        findall([C], member(C, StartCodons), EmitsStart),
        findall([C], member(C, AllNonStart), EmitsNonStart),
        append(EmitsStart,EmitsNonStart,Emits).

values(emit(stop,_codon),Emits) :-
        stop_codons(StopCodons),
        findall([C],member(C,StopCodons),Emits).
      
all_codons(L) :-
        L = [ [a,a,a],[a,a,t],[a,a,c],[a,a,g],
              [a,t,a],[a,t,t],[a,t,c],[a,t,g],
              [a,c,a],[a,c,t],[a,c,c],[a,c,g],
              [a,g,a],[a,g,t],[a,g,c],[a,g,g],
              [t,a,a],[t,a,t],[t,a,c],[t,a,g],
              [t,t,a],[t,t,t],[t,t,c],[t,t,g],
              [t,c,a],[t,c,t],[t,c,c],[t,c,g],
              [t,g,a],[t,g,t],[t,g,c],[t,g,g],
              [c,a,a],[c,a,t],[c,a,c],[c,a,g],
              [c,t,a],[c,t,t],[c,t,c],[c,t,g],
              [c,c,a],[c,c,t],[c,c,c],[c,c,g],
              [c,g,a],[c,g,t],[c,g,c],[c,g,g],
              [g,a,a],[g,a,t],[g,a,c],[g,a,g],
              [g,t,a],[g,t,t],[g,t,c],[g,t,g],
              [g,c,a],[g,c,t],[g,c,c],[g,c,g],
              [g,g,a],[g,g,t],[g,g,c],[g,g,g]].


start_codons(L) :-
        L = [[t,t,g],[c,t,g],[a,t,t],[a,t,c],[a,t,a],[a,t,g],[g,t,g]].

stop_codons(L) :-
        L = [[t,a,a],[t,g,a],[t,a,g]].


%%%
% Model specification:


dicodon(Seq,Annotation) :-
        msw(begin,State),
        dicodon_rec(State,none,Seq,Annotation).

% End State
dicodon_rec(end,_,[],[]).

dicodon_rec(start,Codon,[I|Is],[1,1,1|As]) :-
        msw(emit(start,Codon),I),
        msw(trans(start),NextState),
        dicodon_rec(NextState,I,Is,As).

dicodon_rec(stop,Codon,[I|Is],[1,1,1|As]) :-
        msw(emit(stop,Codon),I),
        msw(trans(stop),NextState),
        dicodon_rec(NextState,I,Is,As).

dicodon_rec(c,Codon,[I|Is],[1,1,1|As]) :-
        msw(emit(c,Codon),I),
        msw(trans(c),NextState),
        dicodon_rec(NextState,I,Is,As).

dicodon_rec(n,Codon[I|Is],[0,0,0|As]) :-
        msw(emit(n,Codon),I),
        msw(trans(n),NextState),
        dicodon_rec(NextState,I,Is,As).

dicodon_noannot(Seq) :-
        msw(begin,State),
        dicodon_noannot_rec(State,Seq).

% End State
dicodon_noannot_rec(end,_,[]).

dicodon_noannot_rec(State,Codon,[I|Is]) :-
        State \= end,
        msw(emit(State,Codon,),I),
        msw(trans(State),NextState),
        dicodon_noannot_rec(NextState,Codon,Is).

