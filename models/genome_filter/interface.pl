:- ['../../lost.pl'].
:- lost_include_api(misc_utils).
:- lost_include_api(chmm).  

number_of_score_categories(10).

test_annotate :-
        annotate(['k12_frames_dat','genemark_predictions.pl'],[],'test_result.pl').

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% annotate
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% annotate([GoldStdFile,PredictionsFile],Options,OutputFile)
% Annotate first initializes the model parameters.
% Then 
% - converts input file to a sequence
% - runs viterbi on the sequence
% - Extract the sequence of visited states from the viterbi tree
% - Create a set of predictions from the sequence of visited states
% - write the set of predictions to OutputFile
annotate([GenbankFile,PredictionsFile],_Options,OutputFile) :-
        prism(genome_finder),
        init_model(PredictionsFile,pGenbankFile),
        show_sw,

        write('model parameters initialized...'),nl,
        list_from_prediction_file(PredictionsFile,PredictionFrames),
        write('Runnning viterbi on prediction sequence:'),nl,
        viterbit(model(PredictionFrames),_,Tree),
        write(done),nl,
        flatten(Tree,TF),findall(S,member(msw(emit(S),_),TF),AllStates),
        write(AllStates),nl,
        terms_to_file('states.pl', [states(AllStates)]),nl,
        predictions_from_state_sequence(PredictionFrames,AllStates,SelectedPredictions),
        write(SelectedPredictions),nl,
        terms_to_file(OutputFile,SelectedPredictions).

list_from_genbank_file(File,List) :-
        open(File,read,Stream),
        read(Stream,model(List)),
        close(Stream).

list_from_prediction_file(File,List) :-
        open(File,read,Stream),
        list_from_stream(Stream,List),
        close(Stream).

%% Reads a file with predictions and produces them as a list
% Fixme: make functor configurable
% We need a functor name if the file contains multiple types of facts
list_from_stream(Stream,List) :-
        read(Stream,Term),
        ((Term == end_of_file) ->
                List = []
                ;
                functor(Term,F,_),
                ((F=='genemark_gene_prediction') ->
                    Term =.. [genemark_gene_prediction,_start,_end,Strand,Frame,_],
                    ((Strand == '+') ->
                        Frame6 = Frame
                        ;
                        Frame6 is 3 + Frame),
                    List = [Frame6|ListRest]
                    ;
                    List = ListRest),
                !,
                list_from_stream(Stream,ListRest)).


%% predictions_from_state_sequence(P,S,M).
% Given a set of predicitions P and corresponding 
% state sequence S generated by the model, M is
% the predictions except the ones generated in a delete state
predictions_from_state_sequence([],[],[]).

predictions_from_state_sequence([_|Ps],[delete|Ss],Ms) :-
       !,
       predictions_from_state_sequence(Ps,Ss,Ms). 

predictions_from_state_sequence([P|Ps],[S|Ss],[P|Ms]) :-
        S \= delete,
        !,
        predictions_from_state_sequence(Ps,Ss,Ms).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% learning of different probability distributions for the model
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

learn([GenbankFile,PredictionsFile],Options,OutputFile) :-
       prism(genome_finder),
       terms_from_file(GenbankFile,RefGenes),
       terms_from_file(PredictionsFile,Predictions),
       write('::: learning frame transitions...'),nl,
       learn_frame_transitions(RefGenes),
       write('::: learning delete transition probability...'),nl,
       learn_delete_transition_probability(RefGenes,Predictions),
       write('::: learning terminate transition probability...'),nl,
       learn_terminate_probability(Predictions),
       write('::: learning emission probabilities...'),nl,
       learn_emission_probabilities(RefGenes,Predictions).


learn_delete_transition_probability(RefGenes,Predictions) :-
        length(RefGenes,RefGenesLen),
        length(Predictions,PredictionsLen),
        split_predictions(Predictions,RefGenes,Correct,Incorrect),
        length(Incorrect,IncorrectLen),
        P_incorrect is IncorrectLen /  PredictionsLen,
        write('here:---<<<<<<'),nl,
        write(P_incorrect),nl,
        NoDeleteProb is 1 - P_incorrect,
%        NoDeleteProb is (RefGenesLen / PredictionsLen),
        DeleteProb is 1-NoDeleteProb,
        set_sw(goto_delete,[DeleteProb,NoDeleteProb]).

%%
% Initialize the probability of termination to be 1 / #predictions
% Is this really a good way of doing it?
% For viterbi it does not really matter much...
learn_terminate_probability(Predictions) :-
       length(Predictions,PredictionsLength),
       TerminateProb is 1 / PredictionsLength,
       NoTerminateProb is 1 - TerminateProb,
       set_sw(terminate,[TerminateProb,NoTerminateProb]).

learn_frame_transitions(GenbankTerms) :-
        % first, fix delete prob and score categories probs to zero 
        % in order to learn transition probabilities only
        toggle_disable_delete(yes),
        %fix_sw(goto_delete, [0,1]),
  %      terms_from_file(GenbankFile,GenbankTerms),
        frame_list_from_genbank_terms(GenbankTerms,FrameList),
        assert(score_categories([0])),
        map(add_unit_score,FrameList,ObservationList),
        learn([model(ObservationList)]),
        retract(score_categories(_)).
        toggle_disable_delete(no).
% where:
        add_unit_score(E,(E,0)).

% Learning the emission probabilities
learn_emission_probabilities(RefGenes,Predictions) :-
        retractall(score_categories(_)),
        %terms_from_file(GenbankFile,RefGenes),
        %terms_from_file(PredictionsFile,Predictions),
        
        % Discretize scores:
        number_of_score_categories(NumScoreGroups),
        scores_from_terms(Predictions,Scores),
        threshold_list_from_scores(Scores,NumScoreGroups,ThresholdList),

        split_predictions(Predictions,RefGenes,Correct,Incorrect),

        frame_score_list_from_predictions(average_probability,Correct,CorrectFrameScorePairs),
        frame_score_list_from_predictions(average_probability,Incorrect,IncorrectFrameScorePairs),
        
        threshold_discrete_frame_score_pairs(ThresholdList,CorrectFrameScorePairs,CorrectFrameScorePairsDiscrete),
        threshold_discrete_frame_score_pairs(ThresholdList,IncorrectFrameScorePairs,IncorrectFrameScorePairsDiscrete),

        groups_from_count(NumScoreGroups,ScoreCategories),
        assert(score_categories(ScoreCategories)),

        listing(score_categories/1),

        write('learning frame emission probabilities'),nl,
        learn_frame_emit_probs(CorrectFrameScorePairsDiscrete),
        write('learning delete emission probabilities'),nl,
        learn_delete_emit_probs(IncorrectFrameScorePairsDiscrete).

learn_frame_emit_probs(FrameScorePairs) :-
        as_frame_emit_goals(FrameScorePairs, PGoals),
        learn(PGoals).
% where:       
  as_frame_emit_goals([],[]).
  as_frame_emit_goals([(F,S)|R1],[dummy_pgoal(emit(F),S)|R2]) :-
        as_frame_emit_goals(R1,R2).

learn_delete_emit_probs(FrameScorePairs) :-
        as_dummy_pgoals(emit(delete),FrameScorePairs, PGoals),
        learn(PGoals).
% where: 
  as_dummy_pgoals(_,[],[]).
  as_dummy_pgoals(SwName,[O|R1],[dummy_pgoal(SwName,O)|R2]) :-
      as_dummy_pgoals(SwName,R1,R2).

% Create a list of frames from genbank terms
frame_list_from_genbank_terms([],[]).
frame_list_from_genbank_terms([T|Ts],[F|Fs]) :-
        T =.. [ _gb, _identifier, _start, _stop, Strand, Frame, _ ], 
        ((Strand == '+') ->
                F = Frame
                ;
                F is Frame + 3),
        !,
        frame_list_from_genbank_terms(Ts,Fs).


% create a list of (frame,score) pairs from a list of predictions
frame_score_list_from_predictions(_, [],[]).
frame_score_list_from_predictions(ScoreFunctor,[T|Ts],[(F,Score)|Fs]) :-
        T =.. [ _, _left, _right, Strand, Frame, Extra ], 
        MatchScore =.. [ ScoreFunctor, Score ],
        member(MatchScore,Extra),
        ((Strand == '+') ->
                F = Frame
                ;
                F is Frame + 3),
        !,
        frame_score_list_from_predictions(ScoreFunctor,Ts,Fs).

% split predictions into a correct set and a wrong set
% Correct means that the prediction have a correct stop codon
% An entry in the list RefGenes is expected to look something like: gb(U00096,190,255,+,1,[...])
split_predictions([],_,[],[]).

split_predictions([P|PredictionsRest],RefGenes,[P|CorrectRest],Incorrect) :-
        P =.. [_,_,L,R,S,F,_],
        RefGenes = [Ref1|_],
        Ref1 =.. [ RefFunctor | _ ],
        ((S=='+') ->
                Match =.. [RefFunctor,_,_,R,S,F,_]
                ;
                Match =.. [RefFunctor,_,L,_,S,F,_]),
        member(Match,RefGenes),
%		write(Match),nl,
        !,
        split_predictions(PredictionsRest,RefGenes,CorrectRest,Incorrect).

split_predictions([P|PredictionsRest],RefGenes,Correct,[P|IncorrectRest]) :-
        !,
        split_predictions(PredictionsRest,RefGenes,Correct,IncorrectRest).
        
         
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Discretizing scores
% Each range of scores is converted into a symbolic value
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

threshold_discrete_frame_score_pairs(_,[],[]).
threshold_discrete_frame_score_pairs(Thresholds,[(F,S)|R1],[(F,DS)|R2]) :-
       threshold_group(Thresholds,S,DS),
       !,
       threshold_discrete_frame_score_pairs(Thresholds,R1,R2).
       

threshold_group(Thresholds,Score,Group) :-
        threshold_group_rec(1,Thresholds,Score,Group).

threshold_group_rec(N,[],_,N).
threshold_group_rec(N,[T|TR],Score,Group) :-
        Score > T,
        !,
        N1 is N + 1,
        threshold_group_rec(N1,TR,Score,Group).
threshold_group_rec(N,[T|_],Score,N) :-
        Score =< T.

groups_from_count(Count,GroupsList) :-
        rev_groups_from_count(Count,GroupsListRev),
        reverse(GroupsListRev,GroupsList).

rev_groups_from_count(0,[]).
rev_groups_from_count(Count,[Count|GroupsRest]) :-
        NewCount is Count - 1,
        rev_groups_from_count(NewCount,GroupsRest).

threshold_list_from_scores(Scores,NumGroups,ThresholdsList) :-
        sort('=<',Scores,SortedScores),
        length(Scores,NumScores),
        GroupSize is round(NumScores / NumGroups),
        write('group size is '), write(GroupSize),nl,
        mk_threshold_list(GroupSize,SortedScores,ThresholdsList).

mk_threshold_list(GroupSize,SortedScores,[ThresholdScore|TSRest]) :-
       length(SortedScores,SortedScoresLength),
       SortedScoresLength > GroupSize,
       !,
       split_list(GroupSize,SortedScores,_,Tail),
       Tail = [ThresholdScore|_],
       mk_threshold_list(GroupSize,Tail,TSRest).

mk_threshold_list(_,_,[]).

% Extract scores from genemark prediction terms
scores_from_terms([],[]).
scores_from_terms([T|Ts],[S|Ss]) :-
        score_from_prediction_term(T,S),
        !,
        scores_from_terms(Ts,Ss).
scores_from_terms([_|Ts],Ss) :-
        scores_from_terms(Ts,Ss).

score_from_prediction_term(T,S) :-
        T =.. [ _functor, _left, _right, _strand, _frame, Extra],
        member(start_codon_probability(S),Extra).



%%%%%%%%%%%%% Some test stuff %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
gb_file(GeneFileProlog) :-
      lost_data_file('U00096_ptt',PttFile),
      run_model(parser_ptt,annotate([PttFile],[],GeneFileProlog)).

veco_file(GeneFileProlog) :-
	lost_data_file('nc000913_2_vecocyc_ptt',PttFile),
    run_model(parser_ptt,annotate([PttFile],[],GeneFileProlog)).

pred_file('best_predictions.pl').

test_l1 :-
      prism(genome_finder),
      gb_file(GeneFileProlog),
   	  write('do I get here?'),
      learn_frame_transitions(GeneFileProlog).

test_l2 :-
	gb_file(RefGeneFile),
	terms_from_file(RefGeneFile,RefGenes),
	pred_file(PFile),
	terms_from_file(PFile,Predictions1),
	elements_with_functor(genemark_gene_prediction,Predictions1,Predictions),
    length(RefGenes,RGL),
    write('number of reference genes: '), write(RGL), nl, 
    length(Predictions,PL),
    write('number of predictions: '), write(PL), nl,
    split_predictions(Predictions,RefGenes,Correct,Incorrect),
	length(Correct,CorrectLen),
	write('correct predictions: '), write(CorrectLen),nl,
	length(Incorrect,IncorrectLen),
	write('Incorrect predictions: '), write(IncorrectLen),nl,
    terms_to_file('incorrect.txt',Incorrect),
    terms_to_file('correct.txt',Correct).

test_l3 :-
	gb_file(GF),
	pred_file(PF),
	prism(genome_finder),
	learn_emission_probabilities(GF,PF),
	show_sw.

test_l4 :-
	gb_file(GF),
	pred_file(PF),
	learn([GF,PF],_,_).


%%%%%%%% Experiment r1: veco_cyc and Soerens gene finder %%%%%%

r1_verified_file(GeneFileProlog) :-
	lost_data_file('nc000913_2_vecocyc_ptt',PttFile),
    run_model(parser_ptt,annotate([PttFile],[],GeneFileProlog)).

tt1 :-
	r1_verified_file(F),
	terms_from_file(F,Ts),
	write(Ts),nl,
	map(calc_len,Ts,Ls),
	write(Ls).
% where
  calc_len([],[]).
  calc_len(T,Length) :- T =.. [_,_,L,R|_], L > R, !,  Length is L - R.
  calc_len(T,Length) :-  T =.. [_,_,L,R|_], Length is R - L.

r1_predictions_file('nc000913_2_all_urfs.pl').

r1_learn :-
	r1_verified_file(RefGeneFile),
	terms_from_file(RefGeneFile,RefGenes),
	r1_predictions_file(PFile),
	terms_from_file(PFile,Predictions1),
	elements_with_functor(prediction,Predictions1,Predictions),
    length(RefGenes,RGL),
    write('number of reference genes: '), write(RGL), nl, 
    length(Predictions,PL),
    write('number of predictions: '), write(PL), nl,
    split_predictions(Predictions,RefGenes,Correct,Incorrect),
	length(Correct,CorrectLen),
	write('correct predictions: '), write(CorrectLen),nl,
	length(Incorrect,IncorrectLen),
	write('Incorrect predictions: '), write(IncorrectLen),nl,
    terms_to_file('r1_incorrect.txt',Incorrect),
    terms_to_file('r1_correct.txt',Correct).


%%%

elements_with_functor(_,[],[]).
	elements_with_functor(F,[E|ERest],[E|CRest]) :-
	E =.. [ F | _ ],
	!,
	elements_with_functor(F,ERest,CRest).

elements_with_functor(F,[_|ERest],CRest) :-
	!,
	elements_with_functor(F,ERest,CRest).
