:- ['../../lost.pl'].
:- lost_include_api(misc_utils).
:- lost_include_api(chmm).  

test_annotate :-
        annotate(['k12_frames_dat','genemark_predictions.pl'],[],'test_result.pl').

annotate([GenbankFile,PredictionsFile],_Options,OutputFile) :-
        prism(genome_finder),
        init_model(PredictionsFile,GenbankFile),
        show_sw,
        write('model parameters initialized...'),nl,
        list_from_prediction_file(PredictionsFile,PredictionFrames),
        write('Runnning viterbi on prediction sequence:'),nl,
        viterbit(model(PredictionFrames),_,Tree),
        write(done),nl,
        flatten(Tree,TF),findall(S,member(msw(emit(S),_),TF),AllStates),
        write(AllStates),nl,
        terms_to_file('states.pl', [states(AllStates)]),nl,
        predictions_from_state_sequence(PredictionFrames,AllStates,SelectedPredictions),
        write(SelectedPredictions),nl,
        terms_to_file(OutputFile,SelectedPredictions).

%% predictions_from_state_sequence(P,S,M).
% Given a set of predicitions P and corresponding 
% state sequence S generated by the model, M is
% the predictions except the ones generated in a delete state

predictions_from_state_sequence([],[],[]).

predictions_from_state_sequence([_|Ps],[delete|Ss],Ms) :-
       !,
       predictions_from_state_sequence(Ps,Ss,Ms). 

predictions_from_state_sequence([P|Ps],[S|Ss],[P|Ms]) :-
        S \= delete,
        !,
        predictions_from_state_sequence(Ps,Ss,Ms).

init_model(PredictionsFile,DataFile) :-
        % pre-fix delete prob to zero to learn
        % transition probs only
        fix_sw(goto_delete, [0,1]),
        list_from_genbank_file(DataFile,GenbankList),
        learn([model(GenbankList)]),
        unfix_sw(goto_delete),

        % load predictions from PredictionsFile
        list_from_prediction_file(PredictionsFile,PredList),
        length(GenbankList,NumGenes),
        length(PredList,NumPredictions),
        UnDeleteProb is NumGenes / NumPredictions,
        DeleteProb is 1 - UnDeleteProb,
        fix_sw(goto_delete, [DeleteProb,UnDeleteProb]).

list_from_genbank_file(File,List) :-
        open(File,read,Stream),
        read(Stream,model(List)),
        close(Stream).

list_from_prediction_file(File,List) :-
        open(File,read,Stream),
        list_from_stream(Stream,List),
        close(Stream).
        
list_from_stream(Stream,List) :-
        read(Stream,Term),
        ((Term == end_of_file) ->
                List = []
                ;
                functor(Term,F,_),
                ((F=='genemark_gene_prediction') ->
                    Term =.. [genemark_gene_prediction,_start,_end,Strand,Frame,_],
                    ((Strand == '+') ->
                        Frame6 = Frame
                        ;
                        Frame6 is 3 + Frame),
                    List = [Frame6|ListRest]
                    ;
                    List = ListRest),
                !,
                list_from_stream(Stream,ListRest)).

