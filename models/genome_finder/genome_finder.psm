% genome_finder_4.psm
% S/ren M/rk
% 100621
% 6-state hmm with hidden frame state and observed frame state

data('~/data/frames/k12_frames.dat').

% load settings:
:-['~/settings/default.pl'].
data('~/data/k12_frames.dat').
predictions_file('genemark_predictions.pl').

init_model :-
        % pre-fix delete prob to zero to learn
        % transition probs only
        fix_sw(goto_delete, [0,1]),
        learn,
        unfix_sw(goto_delete),

        predictions_file(PF),
        list_from_prediction_file(PF,PredList),
        data(D),
        list_from_genbank_file(D,GenbankList),
        length(GenbankList,NumGenes),
        length(PredList,NumPredictions),
        UnDeleteProb is NumGenes / NumPredictions,
        DeleteProb is 1 - UnDeleteProb,
        fix_sw(goto_delete, [DeleteProb,UnDeleteProb]).

list_from_genbank_file(File,List) :-
        open(File,read,Stream),
        read(Stream,model(List)),
        close(Stream).

list_from_prediction_file(File,List) :-
        open(File,read,Stream),
        list_from_stream(Stream,List),
        close(Stream).
        
list_from_stream(Stream,List) :-
        read(Stream,Term),
        ((Term == end_of_file) ->
                List = []
                ;
                functor(Term,F,_),
                ((F=='genemark_gene_prediction') ->
                    Term =.. [genemark_gene_prediction,_start,_end,Strand,Frame,_],
                    ((Strand == '+') ->
                        Frame6 = Frame
                        ;
                        Frame6 is 3 + Frame),
                    List = [Frame6|ListRest]
                    ;
                    List = ListRest),
                !,
                list_from_stream(Stream,ListRest)).

% parameters of model: 
values(trans(_),[frame(1),frame(2),frame(3),frame(4),frame(5),frame(6),end]).

values(emit(1),[1]).
values(emit(2),[2]).
values(emit(3),[3]).
values(emit(4),[4]).
values(emit(5),[5]).
values(emit(6),[6]).
values(emit(delete),[1,2,3,4,5,6]).

values(goto_delete,[yes,no]).

% Initiation:
model(O):-
   msw(trans(begin),S),
   recursion_frame(S,O).

% termination:
recursion_frame(end,[]).

% recursion structure:
recursion_frame(frame(F),XR):-
   msw(goto_delete,GotoDel),
   ((GotoDel == yes) ->
        recursion_frame(delete,frame(F),XR)
        ;
        recursion_frame(frame,frame(F),XR)
   ).

recursion_frame(delete,frame(F),XR):-
     recursion_delete(frame(F),XR).

recursion_frame(frame,frame(F),[X|R]):-
     msw(emit(F), X),
     msw(trans(F),N),
     recursion_frame(N,R).


recursion_delete(frame(F),[X|R]):-
   msw(emit(delete), X),
   msw(goto_delete,GotoDel),
   ((GotoDel == yes) ->
        recursion_delete(frame(F),R)
        ;
        recursion_frame(frame(F),R)
   ).

