:- set_prism_flag(learn_mode,both).

min_gene_length(5).
max_gene_length(2000).

score_categories(250).

gene_lengths(Lengths) :-
	min_gene_length(Min),
	max_gene_length(Max),
	upto(Min,Max,Lengths).

length_ranges([out_of_range(too_short)|RangesWithOverflow]) :-
	score_categories(NumCategories),
	gene_lengths(GeneLengths),
	divide_list(GeneLengths,NumCategories,SubSequences),
	findall(R,(member(Seq,SubSequences),sequence_range(Seq,R)),Ranges),
	reverse(Ranges,RangesRev),
	reverse([out_of_range(too_long)|RangesRev],RangesWithOverflow).
	
values(gene_length,Lengths) :-
	gene_lengths(Lengths).
	
values(length_range, Ranges) :-
	length_ranges(Ranges).
	
msw_gene_length(L) :- msw(gene_length,L).
msw_length_range(R) :- msw(length_range,R).

get_range(Len,out_of_range(too_short)) :-
	min_gene_length(MinLen),
	Len < MinLen.

get_range(Len,out_of_range(too_long))	:-
	max_gene_length(MaxLen),
	Len > MaxLen.
	
get_range(Len,Range) :-
	min_gene_length(MinLen),
	max_gene_length(MaxLen),
	Len >= MinLen,
	Len =< MaxLen,
	length_ranges(Ranges),
	member(Range,Ranges),
	Range = [RangeMin,RangeMax],
	Len >= RangeMin,
	Len =< RangeMax,
	!.
	
learn_lengths(Lengths) :-
	findall(R,(member(L,Lengths),get_range(L,R)),Ranges),
	list_add_functor(msw_length_range,Ranges,Goals),
	learn(Goals).
	
sequence_range(Seq,[First,Last]) :-
	reverse(Seq,RevSeq),
	Seq = [First|_],
	RevSeq = [Last|_].

%%
% Divide a list (of msw gene_length) into continuous groups, e.g.
% 1..20, 21...56, 57..62,....

divide_list([],_,[]).

divide_list(L,0,L).

divide_list(List,NumChunks,[Chunk|ChunksRest]) :-
	length(List,ListLen),
	ChunkLen is ListLen // NumChunks,
	first_n(ChunkLen,List,Chunk),
	append(Chunk,RestList,List),
	RestNumChunks is NumChunks - 1,
	divide_list(RestList,RestNumChunks,ChunksRest).

upto(StartEnd,StartEnd,[StartEnd]).
upto(Start,End,[Start|Rest]) :-
	NewStart is Start + 1,
	upto(NewStart,End,Rest).

first_n(_,[],[]).
first_n(0,_,[]).
first_n(N,[E|R1],[E|R2]) :-
	N1 is N - 1,
	first_n(N1,R1,R2).

list_add_functor(_Functor,[],[]).
list_add_functor(Functor,[L|Ls],[WithFunc|FLs]) :-
	WithFunc =.. [Functor, L],
	list_add_functor(Functor,Ls,FLs).

