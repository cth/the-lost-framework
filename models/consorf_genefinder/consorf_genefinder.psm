%========================================================
% Name: 				consorf_genefinder.psm
% Purpose: 			genefinding model for the LoSt framework
%	Author:				Ole Torp Lassen					
% Version:			1
% Last revised:	11.03 2001		
%========================================================
% Main predicate: consorf_main/3
%			Arg1(input) is OrfAnnotations
%			Arg2(input) is conservation annotations
%			Arg3(output)is prediction annotations 
%========================================================
% Basic 2-state paired HMM taking into regard conservation and orf-annotations
% responsible for sequence modelling
%  		driving predictate consorf/3
%========================================================
% states : 
%			begin
%			coding 		(c) annotated 1
%			noncoding (n) annotated 0
%			end
% emission sequences:
%			orf-annotations, 	alphabet={.,<,-,>}
%			conservation, 		alphabet={0,1,2,3,4,5,6,7,8}
%=========================================================
:- set_prism_flag(learn_mode,both).
:- set_prism_flag(log_viterbi,on).
:- set_prism_flag(scaling,log_exp).

data('u00096-20k_cnk_+1.trn').
values(begin,[c,n]).
values(trans(_),[c,n,end]).
values(emit(_),[
									('.',0),		('.',1),		('.',2),		('.',3),		('.',4),		('.',5),		('.',6),		('.',7),		('.',8),
									('<',0),		('<',1),		('<',2),		('<',3),		('<',4),		('<',5),		('<',6),		('<',7),		('<',8),
									('-',0),		('-',1),		('-',2),		('-',3),		('-',4),		('-',5),		('-',6),		('-',7),		('-',8),
									('>',0),		('>',1),		('>',2),		('>',3),		('>',4),		('>',5),		('>',6),		('>',7),		('>',8)
								]).

consorf(O,C,--A):-
	msw(begin,First),
	consorf_recursive(First,O,C,--A).

consorf_recursive(c,[O|O2],[C|C2],--[1|A2]):-
	msw(emit(c),(O,C)),
	msw(trans(c),Next),
	consorf_recursive(Next, O2, C2, --A2).

consorf_recursive(n,[O|O2],[C|C2],--[0|A2]):-
	msw(emit(n),(O,C)),
	msw(trans(n),Next),
	consorf_recursive(Next, O2, C2, --A2).

consorf_recursive(end,[],[],--[]).


/* predicate for building training data from separate existing files
Make_training_file(Orf_Annot++,Cons_Annot++,Reference_File++,Training_file++)
where 
-	Orf_Annot is a file of facts :  orf_annotation(Id,Left,Right,Dir,Frame,[seq_annotation(Orf_Annot)]).
- Cons_Annot is a file of facts :   conservation(Id,Left,Right,Dir,Frame,[cons_annotation(Cons_Annot)|_Rest_Infos2]).
- Reference_File is a file of facts :         gb(Id,Left,Right,Dir,Frame,Rest_Infos). Ref_Annot is constructed from fact.
- Training_File is a file of goals : 		 consorf(Orf_Annot,Cons_Annot,Ref_Annot). 
such that there is one goal for each Id,Left,Right,Dir,Frame in Orf_Annot.
*/
make_training_file(Orf_Annot,Cons_Annot,Reference_File,Training_File):-
	open(Orf_Annot,read,O_Stream,[alias(orfin)]),
	open(Training_File,write,T_Stream,[alias(trainout)]),
	cl(Cons_Annot),
	read(Orf_Annot_Stream,Term),
	make_training_file_rec(Term,O_Stream,Reference_File,T_Stream),	
	abolish(conservation/6),
	close(Training_Stream),
	close(Orf_Annot_Stream)
	.

make_training_file_rec(end_of_file,_O_Stream,_Reference_File,_T_Stream):-!.	

make_training_file_rec(orf_annotation(Id,Left,Right,Dir,Frame,[seq_annotation(Orf_Annot)]), O_Stream, Ref_File, T_Stream):-
	conservation(Id,Left,Right,Dir,Frame,Extra_Info),
	member(cons_annotation(Cons_Annot),Extra_Info),
	load_annotation_from_file(db,[range(Left,Right)],Ref_File,Ref_Annot),!,
	
	Training_Goal =.. [consorf,Orf_Annot,Cons_Annot,Ref_Annot],
	
	write(T_Stream,Training_Goal),
	write(T_Stream,'.'),
	nl(T_Stream),
	read(Orf_Annot_Stream,Next_Term),
	make_training_file_rec(Next_Term,O_Stream,Reference_File,T_Stream).

/* Examples 

							

							%% making training file
							make_training_file(Orf_Annot_File,Cons_Annot_File, Genebank_file, Training_File),
							assert(data(Training_File)),
							learn.
							
							[autoAnnotations].
							%% Learning
							prismAnnot(consorf_genefinder.psm, direct).
							goals(GS), learn(Gs).

							%% Prediction	
							prismAnnot(consorf_genefinder.psm)	
							testO1(O),testC1(C), viterbiAnnot(consorf(O,C,A),P)
							testO2(O),testC2(C), viterbiAnnot(consorf(O,C,A),P)
*/